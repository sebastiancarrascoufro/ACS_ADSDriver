«REM»

ALMA - Atacama Large Millimeter Array
(c) European Southern Observatory, 2002
(c) Associated Universities Inc., 2002
Copyright by ESO (in the framework of the ALMA collaboration),
Copyright by AUI (in the framework of the ALMA collaboration),
All rights reserved.

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY, without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston,
MA 02111-1307  USA

«ENDREM»

«DEFINE Root FOR Model»
«FILE Acronym"/test/alma/Control/test/"Acronym"TestDB.java"»

/**
 * ALMA - Atacama Large Millimeter Array
 * (c) European Southern Observatory, 2002
 * (c) Associated Universities Inc., 2002
 * Copyright by ESO (in the framework of the ALMA collaboration),
 * Copyright by AUI (in the framework of the ALMA collaboration),
 * All rights reserved.
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY, without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 * MA 02111-1307  USA
 *
 * Warning!
 *  -------------------------------------------------------------------- 
 * | This is generated code!  Do not modify this file.                  |
 * | If you do, all changes will be lost when the file is re-generated. |
 *  --------------------------------------------------------------------
 */

package alma.Control.MonitorDB;

import java.sql.SQLException;
import java.sql.Statement;
import java.sql.ResultSet;

import java.util.Date;
import java.util.GregorianCalendar;

/**
 * The Fill«Acronym» class adds the LRU «Acronym» to the monitor
 * database as a new type of LRU.  It adds a new row to the LRUType
 * table and adds row to the AssemblyType and PropertyType tables
 * to describe its assemblies and its monitored properties.
 * 
 * IMPORTTANT NOTE: This class is configured to use the XE Oracle 
 * database. To run in the STE, it must be re-generated.
 */
public class Fill«Acronym» extends MonitorDB {

    public Fill«Acronym» (String[] s) throws SQLException {
        super("XE");
        connectToMonitorDB();
        setReferenceMap(s);
    }

    private void doInsert(Statement stmt, String sql) throws SQLException {
        System.out.println(">>" + sql);
        int count = stmt.executeUpdate(sql);
        if (count != 1) 
            throw new SQLException("Unexpected row count: got " + count + " expected 1.");
    }

    private float generateData(double min, double max) {
        double data = min + (max - min) * Math.random();
        return (float)data;
    }

    public void fillDevice(long startTime, long endTime) throws SQLException {
        // Find the minimum sampling interval.
        long minInterval = 86400000L;
        long x = 0L;
        for (int i = 0; i < property.length; ++i)
            for (int j = 0; j < property[i].length; ++j) {
                x = property[i][j].getSamplingInterval();
                if (x < minInterval)
                    minInterval = x;
            }
        
        long time = startTime;
        String sql = null;
        float data = 0F;
        Statement stmt = conn.createStatement();
        while (true) {
            // Loop through the properties to see if they should be sampled.
            for (int i = 0; i < property.length; ++i)
                for (int j = 0; j < property[i].length; ++j) {
                    if (property[i][j].doSample(time)) {
                        data = generateData(property[i][j].getMin(),property[i][j].getMax());
                        sql = "INSERT INTO FloatProperty VALUES ( '" + assemblyId[i] + "', '" +
                                property[i][j].getId() + "', '" +
                                convertTime(time) + "', '" +
                                Float.toString(data) + "')";
                        doInsert(stmt,sql);
                        property[i][j].setSamplingInterval(time);
                    }
                }
            time += minInterval;
            if (time >= endTime)
                break;
        }
        // Commit the additions.
        conn.commit();

    }
    
    public static void main(String[] arg) {
        try {
            Fill«Acronym» x = new Fill«Acronym» (arg);
            System.out.println("Connection to the monitor database established.");
            System.out.println("Filling «Acronym»");
            GregorianCalendar startTime = new GregorianCalendar (2006, 4, 21, 23, 0, 0);
            GregorianCalendar endTime = new GregorianCalendar (2006, 4, 23, 1, 0, 0);            
            long start = startTime.getTimeInMillis();
            long end = endTime.getTimeInMillis();
            x.fillDevice(start,end);
            System.out.println("OK.");
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }
}
«ENDFILE»
«ENDDEFINE»
