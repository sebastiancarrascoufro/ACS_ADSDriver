«REM»
ALMA - Atacama Large Millimeter Array
(c) European Southern Observatory, 2002
(c) Associated Universities Inc., 2002
Copyright by ESO (in the framework of the ALMA collaboration),
Copyright by AUI (in the framework of the ALMA collaboration),
All rights reserved.

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY, without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston,
MA 02111-1307  USA

«ENDREM»

«IMPORT org::openarchitectureware::core::meta::core»
«IMPORT org::openarchitectureware::meta::uml»
«IMPORT org::openarchitectureware::meta::uml::classifier»
«IMPORT alma::Control::datamodel::meta::base»
«IMPORT alma::Control::datamodel::meta::amb»
«DEFINE Root FOR DeviceModel»
    «EXPAND SWModuleDef»
«ENDDEFINE»


«DEFINE SWModuleDef FOR DeviceModel»
«FILE Assembly+"/config/"+Assembly+"_SLAVE_SIM.c"»

#ifdef «Assembly»

#include "«Assembly»_SLAVE_SIM.h"


«FOREACH (Set[MonitorPoint]) MonitorPoint AS x»«IF x.isMonitored && !x.isDependent»
uint8_t mntr_«x.MPName»[«x.TotalBytesRawData»]			= {0x0};
uint32_t rca_mntr_«x.MPName» = «x.RCA»;
memcpy(&mntr_«x.MPName», &rca_mntr_«x.MPName», sizeof(mntr_«x.MPName»));
«ENDIF»«ENDFOREACH» 

«FOREACH (Set[ControlPoint]) ControlPoint AS y»«IF !y.isDependent»       
uint8_t ctrl_«y.CPName»[«y.TotalBytesRawData»]			= {0x0};
uint32_t rca_ctrl_«y.CPName» = «y.RCA»;
memcpy(&mntr_«y.CPName», &rca_ctrl_«y.CPName», sizeof(mntr_«y.CPName»));
«ENDIF»«ENDFOREACH» 




void execute_amb_command(XMCMessageStruct_t *msg)
{
	if(msg->commandType == 1U)
	{
		//Control request
		set_«Assembly»_data(msg);
	}
	else if (msg->commandType == 0U)
	{
		//Monitor request
		get_«Assembly»_data(msg);
	}
	else
	{
		msg->status = 0xFF; //INVAILD COMMAND
	}
}


void get_«Assembly»_data(XMCMessageStruct_t *msg)
{
	uint32_t RCA = (msg->address & 0x3FFFF);

	switch(RCA){
        //*************PUNTOS DE MONITOREO AMBSI***********
	«FOREACH (Set[MonitorPoint]) MonitorPoint AS x»«IF x.isMonitored && !x.isDependent»
	case RCA_«x.MPName»:
        	msg->dataLen = sizeof(mntr_«x.MPName»);
        	memcpy(msg->data,mntr_«x.MPName»,sizeof(mntr_«x.MPName»));
            break;«ENDIF»«ENDFOREACH» 
        default:
        	msg->dataLen = 0xFFFF;
        	msg->status = 0xFF;//INVAILD RCA
        	break;
    }
}


void set_«Assembly»_data(XMCMessageStruct_t *msg)
{
	uint32_t RCA = (msg->address & 0x3FFFF);
	//**********MENSAJES DE control***********
	switch (RCA){
	«FOREACH (Set[ControlPoint]) ControlPoint AS y»«IF !y.isDependent»       
		case RCA_«y.CPName»:
		ctrl_«y.CPName»[0] = msg->data[0];
		break;«ENDIF»«ENDFOREACH» 
	
	default:
		msg->status = 0xFF; //INVALID RCA
		break;
	}
}

void update_values(uint32_t ticks_count){
	uint32_t mod = ticks_count % 1250; //Equivale a 60 seg; 60/0.048 = 1250

	//incrementar status
	mntr_STATUS[1]++;
	if(mod == 0)
	{
		//***poner if para mp de 1 Byte
		//Incrementar todos los puntos de monitoreo
		
		«FOREACH (Set[MonitorPoint]) MonitorPoint AS x»«IF x.isMonitored && !x.isDependent»
		«IF x.TotalBytesRawData == "1"»mntr_«x.MPName»[0]++;«ELSE»mntr_«x.MPName»[1]++;«ENDIF»«ENDIF»«ENDFOREACH»
		
	}
}
#endif
«ENDFILE»
«ENDDEFINE»

