«REM»

ALMA - Atacama Large Millimeter Array
(c) European Southern Observatory, 2002
(c) Associated Universities Inc., 2002
Copyright by ESO (in the framework of the ALMA collaboration),
Copyright by AUI (in the framework of the ALMA collaboration),
All rights reserved.

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY, without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston,
MA 02111-1307  USA

«ENDREM»

«IMPORT org::openarchitectureware::core::meta::core»
«IMPORT org::openarchitectureware::meta::uml»
«IMPORT org::openarchitectureware::meta::uml::classifier»
«IMPORT alma::Control::datamodel::meta::base»
«IMPORT alma::Control::datamodel::meta::amb»

«DEFINE Root FOR DeviceModel»
  «IF !IsMonitorDBOnly»
    «EXPAND SWModuleDef»
  «ENDIF»
«ENDDEFINE»

«DEFINE SWModuleDef FOR DeviceModel»
«FILE DirPath+"/test/Test"+Assembly+"AmbDeviceInt.cpp"»
/**
 * ALMA - Atacama Large Millimeter Array
 * (c) European Southern Observatory, 2002
 * (c) Associated Universities Inc., 2002
 * Copyright by ESO (in the framework of the ALMA collaboration),
 * Copyright by AUI (in the framework of the ALMA collaboration),
 * All rights reserved.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY, without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 * MA 02111-1307  USA
 *
 * WARNING! DO NOT MODIFY THIS FILE!
 *  ---------------------------------------------------------
 * | This is generated code!  Do not modify this file.       |
 * | Any changes will be lost when the file is re-generated. |
 *  ---------------------------------------------------------
 */


#include <iostream>
#include <iomanip>
#include <cstdlib>
#include <cerrno>
#include <ambDefs.h>
#include <cppunit/extensions/HelperMacros.h>
#include <BareAmbDeviceInt.h>
#include <«Assembly»HWSimImpl.h>


static unsigned int node_m(0x999999U);

/**
 * A test case for the «Assembly» device communication,
 * using the AmbDeviceInt class
 *
 */
class «Assembly»AmbDeviceIntTestCase: public CPPUNIT_NS::TestFixture
{
    CPPUNIT_TEST_SUITE(«Assembly»AmbDeviceIntTestCase);
    CPPUNIT_TEST(test_simulation);
    CPPUNIT_TEST_SUITE_END();


    public:
    void setUp();


    protected:
    «FOREACH (Set[MonitorPoint]) MonitorPoint AS x»
        «IF !x.isDependent»
    ///  monitorPoint_«x.MPName»
    void testMonitorPoint_«x.MPName»();
        «ENDIF»
    «ENDFOREACH»
    «FOREACH (Set[ControlPoint]) ControlPoint AS x»
        «IF !x.isDependent»
    ///  controlPoint_«x.CPName»
    void testControlPoint_«x.CPName»();
        «ENDIF»
    «ENDFOREACH»

    void test_simulation();


    BareAMBDeviceInt deviceIf;
    BareAMBDeviceInt::ICDPoint point;
};

CPPUNIT_TEST_SUITE_REGISTRATION(«Assembly»AmbDeviceIntTestCase);

void «Assembly»AmbDeviceIntTestCase::setUp()
{
    int channel(0), nodeId(0);

    std::ios::fmtflags oldFlags(std::cout.flags());
    std::cout.setf(std::ios::hex, std::ios::basefield);

    if(node_m != 0x999999U)
    {
        nodeId = node_m;
        std::cout << "Using Node Address 0x"
            << nodeId
            << ".\n";
    }
    else
    {
    «IF NodeAddress != "none" && NodeAddress != "parm"»
        nodeId = «NodeAddress»;
        std::cout << "No Node Address provided. Using default 0x"
            << nodeId
            << ".\n";
    «ELSE»
        std::cout << "No Node Address defined. Exiting...\n";
        exit(-ENXIO);
    «ENDIF»
    }

    std::cout.setf(oldFlags);

    if(deviceIf.initialize(channel, nodeId) == false)
    {
        exit(-ENODEV);
    }
}

    «FOREACH (Set[MonitorPoint]) MonitorPoint AS x»
        «IF !x.isDependent»
    ///  monitorPoint_«x.MPName»
void «Assembly»AmbDeviceIntTestCase::testMonitorPoint_«x.MPName»()
{
    point.rca = AMB::«Assembly»HWSimBase::monitorPoint_«x.MPName»;
    const AmbDataLength_t size(«x.TotalBytesRawData»U);

    point.status = AMBERR_PENDING;
    CPPUNIT_ASSERT_NO_THROW(deviceIf.sendMonitor(point));
    CPPUNIT_ASSERT_EQUAL(AMBERR_NOERR, point.status);  //If fails, probably point was not found.
    CPPUNIT_ASSERT_EQUAL(size, point.dataLength);
}
        «ENDIF»
    «ENDFOREACH»

    «FOREACH (Set[ControlPoint]) ControlPoint AS x»
        «IF !x.isDependent»
    ///  controlPoint_«x.CPName»
void «Assembly»AmbDeviceIntTestCase::testControlPoint_«x.CPName»()
{
    point.rca = AMB::«Assembly»HWSimBase::controlPoint_«x.CPName»;
    point.dataLength = «x.TotalBytesRawData»U;

    for(AmbDataLength_t i(0U); i < point.dataLength; ++i)
    {
        point.data.Char[i] = i + 1U;
    }

    point.status = AMBERR_PENDING;
    CPPUNIT_ASSERT_NO_THROW(deviceIf.sendControl(point));
    CPPUNIT_ASSERT_EQUAL(AMBERR_NOERR, point.status);  //If fails, probably point was not found.
}
        «ENDIF»
    «ENDFOREACH»

void «Assembly»AmbDeviceIntTestCase::test_simulation()
{
    /// Testing specific monitor points
    «FOREACH (Set[MonitorPoint]) MonitorPoint AS x»
        «IF !x.isDependent»
    testMonitorPoint_«x.MPName»();
        «ENDIF»
    «ENDFOREACH»

    /// Testing specific control points
    «FOREACH (Set[ControlPoint]) ControlPoint AS x»
        «IF !x.isDependent»
    testControlPoint_«x.CPName»();
        «ENDIF»
    «ENDFOREACH»

    «IF GenericMonitorPoints»
    /// Testing generic monitor points
    point.rca = AMB::«Assembly»HWSimBase::monitorPoint_SERIAL_NUMBER;
    point.status = AMBERR_PENDING;
    AmbDataLength_t size(8U);
    CPPUNIT_ASSERT_NO_THROW(deviceIf.sendMonitor(point));
    CPPUNIT_ASSERT_EQUAL(AMBERR_NOERR, point.status);  //If fails, probably point was not found.
    CPPUNIT_ASSERT_EQUAL(size, point.dataLength);

    point.rca = AMB::«Assembly»HWSimBase::monitorPoint_PROTOCOL_REV_LEVEL;
    point.status = AMBERR_PENDING;
    size = 3U;
    CPPUNIT_ASSERT_NO_THROW(deviceIf.sendMonitor(point));
    CPPUNIT_ASSERT_EQUAL(AMBERR_NOERR, point.status);  //If fails, probably point was not found.
    CPPUNIT_ASSERT_EQUAL(size, point.dataLength);

    point.rca = AMB::«Assembly»HWSimBase::monitorPoint_CAN_ERROR;
    point.status = AMBERR_PENDING;
    size = 4U;
    CPPUNIT_ASSERT_NO_THROW(deviceIf.sendMonitor(point));
    CPPUNIT_ASSERT_EQUAL(AMBERR_NOERR, point.status);  //If fails, probably point was not found.
    CPPUNIT_ASSERT_EQUAL(size, point.dataLength);

    point.rca = AMB::«Assembly»HWSimBase::monitorPoint_TRANS_NUM;
    point.status = AMBERR_PENDING;
    size = 4U;
    CPPUNIT_ASSERT_NO_THROW(deviceIf.sendMonitor(point));
    CPPUNIT_ASSERT_EQUAL(AMBERR_NOERR, point.status);  //If fails, probably point was not found.
    CPPUNIT_ASSERT_EQUAL(size, point.dataLength);

    point.rca = AMB::«Assembly»HWSimBase::monitorPoint_AMBIENT_TEMPERATURE;
    point.status = AMBERR_PENDING;
    size = 4U;
    CPPUNIT_ASSERT_NO_THROW(deviceIf.sendMonitor(point));
    CPPUNIT_ASSERT_EQUAL(AMBERR_NOERR, point.status);  //If fails, probably point was not found.
    CPPUNIT_ASSERT_EQUAL(size, point.dataLength);

    point.rca = AMB::«Assembly»HWSimBase::monitorPoint_SW_REV_LEVEL;
    point.status = AMBERR_PENDING;
    size = 3U;
    CPPUNIT_ASSERT_NO_THROW(deviceIf.sendMonitor(point));
    CPPUNIT_ASSERT_EQUAL(AMBERR_NOERR, point.status);  //If fails, probably point was not found.
    CPPUNIT_ASSERT_EQUAL(size, point.dataLength);

    /// Testing generic control points
    point.rca = AMB::«Assembly»HWSimBase::controlPoint_RESET_AMBSI;
    point.dataLength = 1U;
    point.data.Char[0] = 1U;
    point.status = AMBERR_PENDING;
    CPPUNIT_ASSERT_NO_THROW(deviceIf.sendControl(point));
    CPPUNIT_ASSERT_EQUAL(AMBERR_NOERR, point.status);  //If fails, probably point was not found.

    point.rca = AMB::«Assembly»HWSimBase::controlPoint_RESET_DEVICE;
    point.dataLength = 1U;
    point.data.Char[0] = 1U;
    point.status = AMBERR_PENDING;
    CPPUNIT_ASSERT_NO_THROW(deviceIf.sendControl(point));
    CPPUNIT_ASSERT_EQUAL(AMBERR_NOERR, point.status);  //If fails, probably point was not found.
    «ENDIF»

    /// Testing error cases
    point.rca = 0x99999U;
    point.dataLength = 1U;
    point.data.Char[0] = 1U;
    point.status = AMBERR_PENDING;
    CPPUNIT_ASSERT_NO_THROW(deviceIf.sendControl(point));
    CPPUNIT_ASSERT_EQUAL(AMBERR_ADDRERR, point.status);

    point.rca = 0x99999U;
    point.status = AMBERR_PENDING;
    CPPUNIT_ASSERT_NO_THROW(deviceIf.sendMonitor(point));
    CPPUNIT_ASSERT_EQUAL(AMBERR_ADDRERR, point.status);
}


/**
 * Main function running the tests
 */
#include <cppunit/BriefTestProgressListener.h>
#include <cppunit/CompilerOutputter.h>
#include <cppunit/extensions/TestFactoryRegistry.h>
#include <cppunit/TestResult.h>
#include <cppunit/TestResultCollector.h>
#include <cppunit/TestRunner.h>


int main(int argc, char* argv[])
{
    // Receive the argument Node ID
    if(argc == 2)
    {
        node_m = atoi(argv[1]);
    }
    else
    {
        node_m = 0x999999U;
    }

    // Create the event manager and test controller
    CPPUNIT_NS::TestResult controller;

    // Add a listener that colllects test result
    CPPUNIT_NS::TestResultCollector result;
    controller.addListener(&result);

    // Add a listener that print dots as test run.
    CPPUNIT_NS::BriefTestProgressListener progress;
    controller.addListener(&progress);

    // Add the top suite to the test runner
    CPPUNIT_NS::TestRunner runner;
    runner.addTest(CPPUNIT_NS::TestFactoryRegistry::getRegistry().makeTest());
    runner.run(controller);

    // Print test in a compiler compatible format.
    CPPUNIT_NS::CompilerOutputter outputter(&result, std::cerr);
    outputter.write();

    return result.wasSuccessful() ? 0 : 1;
}
«ENDFILE»
«ENDDEFINE»
