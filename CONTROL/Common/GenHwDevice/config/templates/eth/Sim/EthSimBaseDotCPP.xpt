«REM»
ALMA - Atacama Large Millimeter Array
(c) European Southern Observatory, 2002
(c) Associated Universities Inc., 2002
Copyright by ESO (in the framework of the ALMA collaboration),
Copyright by AUI (in the framework of the ALMA collaboration),
All rights reserved.

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY, without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston,
MA 02111-1307  USA

«ENDREM»

«IMPORT org::openarchitectureware::core::meta::core»
«IMPORT org::openarchitectureware::meta::uml»
«IMPORT org::openarchitectureware::meta::uml::classifier»
«IMPORT alma::Control::datamodel::meta::base»
«IMPORT alma::Control::datamodel::meta::eth»

«DEFINE Root FOR DeviceModel»
    «EXPAND SWModuleDef»
«ENDDEFINE»

«DEFINE SWModuleDef FOR DeviceModel»
«FILE DirPath+"/src/"+Assembly+"EthSimBase.cpp"»
/**
 * ALMA - Atacama Large Millimeter Array
 * (c) European Southern Observatory, 2002
 * (c) Associated Universities Inc., 2002
 * Copyright by ESO (in the framework of the ALMA collaboration),
 * Copyright by AUI (in the framework of the ALMA collaboration),
 * All rights reserved.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY, without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 * MA 02111-1307  USA
 *
 * WARNING! DO NOT MODIFY THIS FILE!
 *  ---------------------------------------------------------
 * | This is generated code!  Do not modify this file.       |
 * | Any changes will be lost when the file is re-generated. |
 *  ---------------------------------------------------------
 */


#include <«Assembly»EthSimBase.h>


// Constructor
«Assembly»EthSimBase::«Assembly»EthSimBase():
«IF Extends != "none"»
    «Extends»EthSimImpl()
«ELSE»
    EthernetDeviceInterface()
«ENDIF»
    , m_isOpen(false)
{
}

// Destructor
«Assembly»EthSimBase::~«Assembly»EthSimBase()
{
}

CORBA::Boolean «Assembly»EthSimBase::isSimulated()
{
    return true;
}

// EthernetDeviceInterface Methods
void «Assembly»EthSimBase::open(const string& hostname,
    const std::vector< std::string >& parameters)
{
    // parsing the parameters
    try
    {
        // Cast  the string to the corresponding type
        std::stringstream data;

        // Parsing the parameters
        m_hostname = hostname;
        data << parameters[0];
        data >> m_port;

        data << parameters[1];
        data >> m_timeout;

        data << parameters[2];
        data >> m_lingerTime;

        data << parameters[3];
        data >> m_retries;
    }
    catch(...)
    {
        throw SocketOperationFailedEx(std::string(__PRETTY_FUNCTION__)
            + std::string(": Error parsing parameters"));
    }

    // Opening socket
    if(m_isOpen == false)
    {
        m_isOpen = true;
    }
    else
    {
        throw SocketOperationFailedEx(std::string(__PRETTY_FUNCTION__)
            + std::string(": Error Opening the socket: Already open."));
}

void «Assembly»EthSimBase::close()
{
    // Closing socket
    if(m_isOpen == true)
    {
        m_isOpen = false;
    }
    else
    {
        throw SocketOperationFailedEx(std::string(__PRETTY_FUNCTION__)
            + std::string(": Error closing the socket: Already closed."));
    }
}

void «Assembly»EthSimBase::monitor(int address, int& value)
{
    throw SocketOperationFailedEx(std::string(__PRETTY_FUNCTION__)
         + std::string(": No monitor points defined for int"));
}

void «Assembly»EthSimBase::monitor(int address, short& value)
{
    throw SocketOperationFailedEx(std::string(__PRETTY_FUNCTION__)
         + std::string(": No monitor points defined for short"));
}

void «Assembly»EthSimBase::monitor(int address, int64_t& value)
{
    throw SocketOperationFailedEx(std::string(__PRETTY_FUNCTION__)
         + std::string(": No monitor points defined for int64_t"));
}

void «Assembly»EthSimBase::monitor(int address, char& value)
{
    throw SocketOperationFailedEx(std::string(__PRETTY_FUNCTION__)
         + std::string(": No monitor points defined for char"));
}

void «Assembly»EthSimBase::monitor(int address, std::string& value)
{
    throw SocketOperationFailedEx(std::string(__PRETTY_FUNCTION__)
         + std::string(": No monitor points defined for std::string"));
}

void «Assembly»EthSimBase::monitor(int address, float& value)
{
    throw SocketOperationFailedEx(std::string(__PRETTY_FUNCTION__)
         + std::string(": No monitor points defined for float"));
}

void «Assembly»EthSimBase::monitor(int address, double& value)
{
    throw SocketOperationFailedEx(std::string(__PRETTY_FUNCTION__)
         + std::string(": No monitor points defined for double"));
}

void «Assembly»EthSimBase::monitor(int address, bool& value)
{
    throw SocketOperationFailedEx(std::string(__PRETTY_FUNCTION__)
         + std::string(": No monitor points defined for bool"));
}

void «Assembly»EthSimBase::monitor(int address, std::vector< int >& value)
{
    throw SocketOperationFailedEx(std::string(__PRETTY_FUNCTION__)
         + std::string(": No monitor points defined for std::vector< int >"));
}

void «Assembly»EthSimBase::monitor(int address, std::vector< short >& value)
{
    throw SocketOperationFailedEx(std::string(__PRETTY_FUNCTION__)
         + std::string(": No monitor points defined for std::vector< short >"));
}

void «Assembly»EthSimBase::monitor(int address, std::vector< int64_t >& value)
{
    throw SocketOperationFailedEx(std::string(__PRETTY_FUNCTION__)
         + std::string(": No monitor points defined for std::vector< int64_t >"));
}

void «Assembly»EthSimBase::monitor(int address, std::vector< char >& value)
{
    throw SocketOperationFailedEx(std::string(__PRETTY_FUNCTION__)
         + std::string(": No monitor points defined for std::vector< char >"));
}

void «Assembly»EthSimBase::monitor(int address, std::vector< string >& value)
{
    throw SocketOperationFailedEx(std::string(__PRETTY_FUNCTION__)
         + std::string(": No monitor points defined for std::vector< string >"));
}

void «Assembly»EthSimBase::monitor(int address, std::vector< float >& value)
{
    throw SocketOperationFailedEx(std::string(__PRETTY_FUNCTION__)
         + std::string(": No monitor points defined for std::vector< float >"));
}

void «Assembly»EthSimBase::monitor(int address, std::vector< double >& value)
{
    throw SocketOperationFailedEx(std::string(__PRETTY_FUNCTION__)
         + std::string(": No monitor points defined for std::vector< double >"));
}

void «Assembly»EthSimBase::monitor(int address, std::vector< bool >& value)
{
    throw SocketOperationFailedEx(std::string(__PRETTY_FUNCTION__)
         + std::string(": No monitor points defined for std::vector< bool >"));
}

void «Assembly»EthSimBase::command(int address)
{
    throw SocketOperationFailedEx(std::string(__PRETTY_FUNCTION__)
         + std::string(": No command points defined for void"));
}

void «Assembly»EthSimBase::command(int address, const int& value)
{
    throw SocketOperationFailedEx(std::string(__PRETTY_FUNCTION__)
         + std::string(": No command points defined for int"));
}

void «Assembly»EthSimBase::command(int address, const short& value)
{
    throw SocketOperationFailedEx(std::string(__PRETTY_FUNCTION__)
         + std::string(": No command points defined for short"));
}

void «Assembly»EthSimBase::command(int address, const int64_t& value)
{
    throw SocketOperationFailedEx(std::string(__PRETTY_FUNCTION__)
         + std::string(": No command points defined for int64_t"));
}

void «Assembly»EthSimBase::command(int address, const char& value)
{
    throw SocketOperationFailedEx(std::string(__PRETTY_FUNCTION__)
         + std::string(": No command points defined for char"));
}

void «Assembly»EthSimBase::command(int address, const string& value)
{
    throw SocketOperationFailedEx(std::string(__PRETTY_FUNCTION__)
         + std::string(": No command points defined for string"));
}

void «Assembly»EthSimBase::command(int address, const float& value)
{
    throw SocketOperationFailedEx(std::string(__PRETTY_FUNCTION__)
         + std::string(": No command points defined for float"));
}

void «Assembly»EthSimBase::command(int address, const double& value)
{
    throw SocketOperationFailedEx(std::string(__PRETTY_FUNCTION__)
         + std::string(": No command points defined for double"));
}

void «Assembly»EthSimBase::command(int address, const bool& value)
{
    throw SocketOperationFailedEx(std::string(__PRETTY_FUNCTION__)
         + std::string(": No command points defined for bool"));
}

void «Assembly»EthSimBase::command(int address, const std::vector<int >& value)
{
    throw SocketOperationFailedEx(std::string(__PRETTY_FUNCTION__)
         + std::string(": No command points defined for std::vector< int >"));
}

void «Assembly»EthSimBase::command(int address, const std::vector<short >& value)
{
    throw SocketOperationFailedEx(std::string(__PRETTY_FUNCTION__)
         + std::string(": No command points defined for std::vector< short >"));
}

void «Assembly»EthSimBase::command(int address, const std::vector<int64_t >& value)
{
    throw SocketOperationFailedEx(std::string(__PRETTY_FUNCTION__)
         + std::string(": No command points defined for std::vector< int64_t >"));
}

void «Assembly»EthSimBase::command(int address, const std::vector<char >& value)
{
    throw SocketOperationFailedEx(std::string(__PRETTY_FUNCTION__)
         + std::string(": No command points defined for std::vector< char >"));
}

void «Assembly»EthSimBase::command(int address, const std::vector<string >& value)
{
    throw SocketOperationFailedEx(std::string(__PRETTY_FUNCTION__)
         + std::string(": No command points defined for std::vector< string >"));
}

void «Assembly»EthSimBase::command(int address, const std::vector<float >& value)
{
    throw SocketOperationFailedEx(std::string(__PRETTY_FUNCTION__)
         + std::string(": No command points defined for std::vector< float >"));
}

void «Assembly»EthSimBase::command(int address, const std::vector<double >& value)
{
    throw SocketOperationFailedEx(std::string(__PRETTY_FUNCTION__)
         + std::string(": No command points defined for std::vector< double >"));
}

void «Assembly»EthSimBase::command(int address, const std::vector<bool >& value)
{
    throw SocketOperationFailedEx(std::string(__PRETTY_FUNCTION__)
         + std::string(": No command points defined for std::vector< bool >"));
}
«ENDFILE»
«ENDDEFINE»
