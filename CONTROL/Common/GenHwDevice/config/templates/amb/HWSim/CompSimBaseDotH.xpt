«REM»
ALMA - Atacama Large Millimeter Array
(c) European Southern Observatory, 2002
(c) Associated Universities Inc., 2002
Copyright by ESO (in the framework of the ALMA collaboration),
Copyright by AUI (in the framework of the ALMA collaboration),
All rights reserved.

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY, without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston,
MA 02111-1307  USA

«ENDREM»

«IMPORT org::openarchitectureware::core::meta::core»
«IMPORT org::openarchitectureware::meta::uml»
«IMPORT org::openarchitectureware::meta::uml::classifier»
«IMPORT alma::Control::datamodel::meta::base»
«IMPORT alma::Control::datamodel::meta::amb»

«DEFINE Root FOR DeviceModel»
  «IF !IsMonitorDBOnly»
    «EXPAND SWModuleDef»
  «ENDIF»
«ENDDEFINE»

«DEFINE SWModuleDef FOR DeviceModel»
«FILE DirPath+"/include/"+Assembly+"CompSimBase.h"»
#ifndef __cplusplus
#error This is a C++ include file and cannot be used from plain C.
#endif
#ifndef «Assembly»CompSimBase_h
#define «Assembly»CompSimBase_h
//
// ALMA - Atacama Large Millimiter Array
// (c) Associated Universities Inc., 2011
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA
//
// WARNING! DO NOT MODIFY THIS FILE!
//  ---------------------------------------------------------
// | This is generated code!  Do not modify this file.       |
// | Any changes will be lost when the file is re-generated. |
//  ---------------------------------------------------------
//



#include <AmbSimulationInt.h>
#include <«Assembly»CompSimBaseS.h>
#include <«Assembly»Impl.h>


/// The «Assembly»CompSimBase class is the local component for the
/// «DeviceName» hardware simulator.
/// <ul>
/// <li> Device:   «DeviceName»
/// <li> Assembly: «Assembly»
/// <li> Parent:   «Parent»
/// <li> Node:     «NodeAddress»
/// <li> Channel:  «Channel»
/// </ul>
class «Assembly»CompSimBase: public «Assembly»Impl,
    public virtual POA_Control::«Assembly»CompSimBase
{
    public:
    «Assembly»CompSimBase(const ACE_CString& name,
       maci::ContainerServices* pCS);

    virtual ~«Assembly»CompSimBase();

    /// Returns true if a device is in simulation mode, false if
    /// it works with real hardware.
    virtual CORBA::Boolean isSimulated();

    /// \exception ControlExceptions::SimErrorEx
    virtual void setSimValue(const CORBA::Long rca,
        const Control::LongSeq& data);

    /// \exception ControlExceptions::SimErrorEx
    Control::LongSeq* getSimValue(const CORBA::Long rca);

    virtual void monitor(AmbRelativeAddr RCA, AmbDataLength_t& dataLength,
        AmbDataMem_t* data, sem_t* synchLock, Time* timestamp,
            AmbErrorCode_t* status);

    virtual void command(AmbRelativeAddr RCA,AmbDataLength_t dataLength,
        const AmbDataMem_t* data, sem_t* synchLock, Time* timestamp,
        AmbErrorCode_t* status);

    virtual void monitorTE(ACS::Time TimeEvent, AmbRelativeAddr RCA,
        AmbDataLength_t& dataLength, AmbDataMem_t* data, sem_t* synchLock,
        Time* timestamp, AmbErrorCode_t* status);

    virtual void commandTE(ACS::Time TimeEvent, AmbRelativeAddr RCA,
        AmbDataLength_t dataLength, const AmbDataMem_t* data, sem_t* synchLock,
        Time* timestamp, AmbErrorCode_t* status);

    virtual void monitorNextTE(AmbRelativeAddr RCA, AmbDataLength_t& dataLength,
        AmbDataMem_t* data, sem_t* synchLock, Time* timestamp,
        AmbErrorCode_t* status);

    virtual void commandNextTE(AMBSystem::AmbRelativeAddr RCA,
        AmbDataLength_t dataLength, const AmbDataMem_t* data, sem_t* synchLock,
        ACS::Time* timestamp, AmbErrorCode_t* status);

    virtual void flushNode(ACS::Time TimeEvent, ACS::Time* timestamp,
        AmbErrorCode_t* status);

    virtual void flushRCA(ACS::Time TimeEvent, AmbRelativeAddr RCA,
        ACS::Time* timestamp, AmbErrorCode_t* status);


    protected:
    virtual void getAmbInterfaceInstance()
    {
    };

    /// \exception ControlExceptions::CAMBErrorExImpl
    virtual void getDeviceUniqueId(std::string& deviceID);

    AmbSimulationInt simulationIf_m;


    private:
    /// No default ctor.
    «Assembly»CompSimBase();

    /// Copy constructor is not allowed.
    «Assembly»CompSimBase(const «Assembly»CompSimBase&);

    /// Assignment operator is not allowed. 
    «Assembly»CompSimBase& operator=(const «Assembly»CompSimBase&);
};
#endif
«ENDFILE»
«ENDDEFINE»
